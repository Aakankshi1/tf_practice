##Security Grp for ELB
resource "aws_security_group" "elb_sec" 
{
  name = "elb_sec"
  egress 
  {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress 
  {
    from_port = 80
    to_port = 80
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

### Creating ELB
resource "aws_elb" "elb1" 
{
  name = "elb1"
  security_groups = ["${aws_security_group.elb_sec.id}"]
#  availability_zones = ["${data.aws_availability_zones.all.names}"]

  health_check 
  {
    healthy_threshold = 2
    unhealthy_threshold = 2
    timeout = 3
    interval = 30
    target = "HTTP:8080/"
  }

  listener 
  {
    lb_port = 80
    lb_protocol = "http"
    instance_port = "8080"
    instance_protocol = "http"
  }
}


##Create launch Configuration
resource aws_launch_configuration" "lc1" 
{
  image_id               = "${lookup(var.amis,var.region)}"
  instance_type          = "var.ins_type"
  security_groups        = ["${aws_security_group.sg1.id}"]
#  key_name               = "${var.key}"
  user_data = <<-EOF
              #!/bin/bash
              echo "Hello, World" > index.html
              nohup busybox httpd -f -p 8080 &
              EOF
  lifecycle 
  {
    create_before_destroy = true
  }
}

##Create Autoscaling group
resource "aws_autoscaling_group" "aut_g" 
{
  launch_configuration = "${aws_launch_configuration.lc1.id}"
#  availability_zones = ["${data.aws_availability_zones.all.names}"]
  min_size = 2
  max_size = 10
  load_balancers = ["${aws_elb.elb1.name}"]
  health_check_type = "ELB"
  tag 
  {
    key = "Name"
    value = "terraform-asg-example"
    propagate_at_launch = true
  }
}


